import os
import logging
import json
import requests
from .sf_config import SalesforceConfig
from .sf_auth import SalesforceAuth

logger = logging.getLogger()
logger.setLevel(logging.getLevelName(os.environ["LAMBDA_LOGGING_LEVEL"]))


class Salesforce:
    def __init__(self):
        self.request = Request()

    def search(self, query):
        logger.debug("Salesforce: Search")
        self.init_request()
        try:
            resp = self.request.get(url=SalesforceConfig.SALESFORCE_REST_API_ENDPOINT_BASE + '/search', params={'q': query}, headers=self.headers)
        except:
            self.init_request(refresh=True)
            resp = self.request.get(url=SalesforceConfig.SALESFORCE_REST_API_ENDPOINT_BASE + '/search', params={'q': query}, headers=self.headers)

        return resp.json()['searchRecords']

    def query(self, query):
        logger.debug("Salesforce: Query")
        self.init_request()
        try:
            resp = self.request.get(url=SalesforceConfig.SALESFORCE_REST_API_ENDPOINT_BASE + '/query', params={'q': query}, headers=self.headers)
        except:
            self.init_request(refresh=True)
            resp = self.request.get(url=SalesforceConfig.SALESFORCE_REST_API_ENDPOINT_BASE + '/query', params={'q': query}, headers=self.headers)

        data = resp.json()

        for record in data['records']:
            del record['attributes']

        return data['records']

    def parameterizedSearch(self, params):
        logger.debug("Salesforce: Parameterized Search")
        self.init_request()
        try:
            resp = self.request.get(url=SalesforceConfig.SALESFORCE_REST_API_ENDPOINT_BASE + '/parameterizedSearch', params=params, headers=self.headers)
        except:
            self.init_request(refresh=True)
            resp = self.request.get(url=SalesforceConfig.SALESFORCE_REST_API_ENDPOINT_BASE + '/parameterizedSearch', params=params, headers=self.headers)

        data = resp.json()

        for record in data['searchRecords']:
            del record['attributes']

        return data['searchRecords']

    def update(self, sobject, sobject_id, data):
        logger.debug("Salesforce: Update")
        self.init_request()
        try:
            resp = self.request.patch(url=SalesforceConfig.SALESFORCE_REST_API_ENDPOINT_BASE + '/sobjects/%s/%s' % (sobject, sobject_id), data=data, headers=self.headers)
        except:
            self.init_request(refresh=True)
            resp = self.request.patch(url=SalesforceConfig.SALESFORCE_REST_API_ENDPOINT_BASE + '/sobjects/%s/%s' % (sobject, sobject_id), data=data, headers=self.headers)

        return resp.status_code

    def update_by_external(self, sobject, field, sobject_id, data):
        logger.debug("Salesforce: Update by External")
        self.init_request()
        try:
            resp = self.request.patch(url=SalesforceConfig.SALESFORCE_REST_API_ENDPOINT_BASE + '/sobjects/%s/%s/%s' % (sobject, field, sobject_id), data=data, headers=self.headers)
        except:
            self.init_request(refresh=True)
            resp = self.request.patch(url=SalesforceConfig.SALESFORCE_REST_API_ENDPOINT_BASE + '/sobjects/%s/%s/%s' % (sobject, field, sobject_id), data=data, headers=self.headers)

        return resp.status_code

    def create(self, sobject, data):
        logger.debug("Salesforce: Create")
        self.init_request()
        try:
            resp = self.request.post(url=SalesforceConfig.SALESFORCE_REST_API_ENDPOINT_BASE + '/sobjects/%s' % (sobject), data=data, headers=self.headers)
        except:
            self.init_request(refresh=True)
            resp = self.request.post(url=SalesforceConfig.SALESFORCE_REST_API_ENDPOINT_BASE + '/sobjects/%s' % (sobject), data=data, headers=self.headers)

        return resp.json()['id']

    def delete(self, sobject, sobject_id):
        logger.debug("Salesforce: Delete")
        self.init_request()
        try:
            resp = self.request.delete(url=SalesforceConfig.SALESFORCE_REST_API_ENDPOINT_BASE + '/sobjects/%s/%s' % (sobject, sobject_id), headers=self.headers)
        except:
            self.init_request(refresh=True)
            resp = self.request.delete(url=SalesforceConfig.SALESFORCE_REST_API_ENDPOINT_BASE + '/sobjects/%s/%s' % (sobject, sobject_id), headers=self.headers)

    def call_flow(self, sflow, data):
        logger.debug("Salesforce: Call Flow")
        self.init_request()
        try:
            resp = self.request.post(url=SalesforceConfig.SALESFORCE_REST_API_ENDPOINT_BASE + '/actions/custom/flow/%s' % (sflow), data={"inputs": data}, headers=self.headers)
        except:
            self.init_request(refresh=True)
            resp = self.request.post(url=SalesforceConfig.SALESFORCE_REST_API_ENDPOINT_BASE + '/actions/custom/flow/%s' % (sflow), data={"inputs": data}, headers=self.headers)

        return resp.json()

    def tooling(self, sobject, sobject_id):
        logger.debug("Salesforce: Tooling")
        self.init_request()
        try:
            resp = self.request.get(
                url=SalesforceConfig.SALESFORCE_REST_API_ENDPOINT_BASE + '/tooling/sobjects/%s/%s' % (sobject, sobject_id),
                headers=self.headers)
        except:
            self.init_request(refresh=True)
            resp = self.request.get(
                url=SalesforceConfig.SALESFORCE_REST_API_ENDPOINT_BASE + '/tooling/sobjects/%s/%s' % (sobject, sobject_id),
                params={},
                headers=self.headers)

        return resp.json()

    def init_request(self, refresh=False):
        self.access_token = SalesforceAuth().get_access_token(refresh=refresh)
        self.headers = {
            'Authorization': 'Bearer %s' % self.access_token,
            'Content-Type': 'application/json'
        }


class Request:
    def post(self, url, headers, data=None, params=None, hideData=False):
        logger.debug('POST Requests:\nurl=%s' % url)
        if not hideData:
            logger.debug("data=%s\nparams=%s" % (data, params))
        r = requests.post(url=url, data=json.dumps(data), params=params, headers=headers)
        if not hideData:
            logger.debug("Response: %s" % r.text)

        return __check_resp__(r)

    def delete(self, url, headers):
        logger.debug("DELETE Requests:\nurl=%s" % url)
        r = requests.delete(url=url, headers=headers)
        logger.debug("Response: %s" % r.text)

        return __check_resp__(r)

    def patch(self, url, data, headers):
        logger.debug("PATCH Requests:\nurl=%s\ndata=%s" % (url, data))
        r = requests.patch(url=url, data=json.dumps(data), headers=headers)
        logger.debug("Response: %s" % r.text)

        return __check_resp__(r)

    def get(self, url, params, headers):
        logger.debug("GET Requests:\nurl=%s\nparams=%s" % (url, params))
        r = requests.get(url=url, params=params, headers=headers)
        logger.debug("Response: %s" % r.text)

        return __check_resp__(r)


def __check_resp__(resp):
    logger.debug(resp)

    if resp.status_code // 100 == 2:
        return resp

    data = resp.json()
    if 'error' in data:
        msg = "%s: %s" % (data['error'], data['error_description'])
        logger.error(msg)
        raise Exception(msg)

    if isinstance(data, list):
        for error in data:
            if 'message' in error:
                msg = "%s: %s" % (error['errorCode'], error['message'])
                logger.error(msg)
                raise Exception(msg)

    msg = "request returned status code: %d" % resp.status_code
    logger.error(msg)
    raise Exception(msg)