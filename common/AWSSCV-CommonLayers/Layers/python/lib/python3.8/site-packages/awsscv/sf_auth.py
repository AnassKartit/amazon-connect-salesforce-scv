import os
import logging
from datetime import datetime, timedelta, timezone
import boto3
import requests
import jwt
from .sf_config import SalesforceConfig

logger = logging.getLogger()
logger.setLevel(logging.getLevelName(os.environ["LAMBDA_LOGGING_LEVEL"]))

client = boto3.client('ssm')

class SalesforceAuth:
    def __init__(self):
        logger.debug("SalesforceAuth init")    
        
        
    def get_settings(self, param_names, with_encryption):
        settings = client.get_parameters(Names=param_names, WithDecryption=with_encryption)
    
        return settings['Parameters']
    
    
    def generate_jwt(self, payload, private_key):
        return jwt.encode(payload, private_key, algorithm='RS256')
    
    
    def get_access_token(self, refresh=False):
        params = self.get_settings([SalesforceConfig.CONSUMER_KEY_PARAM_NAME, SalesforceConfig.PRIVATE_KEY_PARAM_NAME, SalesforceConfig.ACCESS_TOKEN_PARAM_NAME], True)
        
        consumer_key = list(filter(lambda p: p['Name'] == SalesforceConfig.CONSUMER_KEY_PARAM_NAME, params))[0]['Value']
        private_key = list(filter(lambda p: p['Name'] == SalesforceConfig.PRIVATE_KEY_PARAM_NAME, params))[0]['Value']
        access_token = list(filter(lambda p: p['Name'] == SalesforceConfig.ACCESS_TOKEN_PARAM_NAME, params))[0]['Value']
        
        if (refresh == True or access_token == 'PLACEHOLDER'):
            logger.debug("Creating new access token...")
            exp = datetime.now(timezone.utc) + timedelta(minutes=SalesforceConfig.TOKEN_VALID_FOR)
            
            jwt = self.generate_jwt({
                'iss': consumer_key,
                'sub': SalesforceConfig.SUBJECT,
                'aud': SalesforceConfig.AUDIENCE,
                'exp': exp
            }, private_key)
        
            response = requests.post(
                SalesforceConfig.SALESFORCE_AUTH_ENDPOINT,
                data='grant_type=urn%3Aietf%3Aparams%3Aoauth%3Agrant-type%3Ajwt-bearer&assertion=' + str(jwt, 'utf-8'),
                headers={'Content-Type': 'application/x-www-form-urlencoded'}
            )

            logger.debug(response)
        
            access_token = response.json()['access_token']
            client.put_parameter(
                Name=SalesforceConfig.ACCESS_TOKEN_PARAM_NAME,
                Value=access_token,
                Type='SecureString',
                Overwrite=True
            )
            return access_token
        else:
            logger.debug("Using current access token...")
            return access_token